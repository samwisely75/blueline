name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  packages: write

jobs:
  # CI jobs must pass before any release steps
  ci:
    name: CI Checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run doctests
      run: cargo test --doc

    - name: Test with minimal dependencies
      if: matrix.os == 'ubuntu-latest'
      run: cargo test --no-default-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release binary
      run: cargo build --release

    - name: Test CLI functionality
      run: |
        # Test basic functionality
        ./target/release/webly --help
        ./target/release/webly GET https://httpbin.org/get
        echo '{"test": "data"}' | ./target/release/webly POST https://httpbin.org/post

    - name: Test configuration file
      run: |
        # Create test config
        mkdir -p ~/.webly
        echo '[test]
        host = https://httpbin.org
        @content-type = application/json' > ~/.webly/profiles
        
        # Test with profile
        ./target/release/webly -p test GET /get

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ci, security-audit, integration-test]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true

  build:
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    needs: [ci, security-audit, integration-test]
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: webly-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: webly-x86_64-unknown-linux-musl.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: webly-aarch64-unknown-linux-gnu.tar.gz
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: webly-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: webly-aarch64-apple-darwin.tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: webly-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            asset_name: webly-aarch64-pc-windows-msvc.zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} webly
        cd ../../../
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
        else
          sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
        fi

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} webly.exe
        cd ../../../
        Get-FileHash -Algorithm SHA256 ${{ matrix.asset_name }} | Format-List Hash | Out-String -Width 100 | ForEach-Object { $_.Split(' ')[3] + "  " + "${{ matrix.asset_name }}" } | Out-File -FilePath ${{ matrix.asset_name }}.sha256 -Encoding ascii

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          ${{ matrix.asset_name }}
          ${{ matrix.asset_name }}.sha256

  build-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: [ci, security-audit, integration-test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Install cargo-deb and cargo-generate-rpm
      run: |
        cargo install cargo-deb cargo-generate-rpm

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build .deb package
      run: |
        cargo deb --target ${{ matrix.target }} --no-build --deb-version ${{ steps.version.outputs.VERSION }}
        find target/${{ matrix.target }}/debian/ -name "*.deb" -exec mv {} webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb \;

    - name: Build .rpm package
      run: |
        cargo generate-rpm --target ${{ matrix.target }} --payload-compress none
        find target/${{ matrix.target }}/generate-rpm/ -name "*.rpm" -exec mv {} webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm \;

    - name: Generate checksums
      run: |
        sha256sum webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb > webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb.sha256
        sha256sum webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm > webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm.sha256

    - name: Upload Linux Packages
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb.sha256
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm.sha256

  build-msi:
    name: Build Windows MSI
    runs-on: windows-latest
    needs: [ci, security-audit, integration-test]
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cargo-wix
      run: cargo install cargo-wix

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Extract version from tag
      id: version
      shell: bash
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Initialize WiX
      run: cargo wix init

    - name: Build MSI
      run: cargo wix --target ${{ matrix.target }} --no-build --nocapture

    - name: Rename MSI file
      run: |
        $msiFile = Get-ChildItem -Path "target\wix\" -Filter "*.msi" | Select-Object -First 1
        if ($msiFile) {
          Move-Item $msiFile.FullName "webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi"
        }

    - name: Generate checksum
      run: |
        $hash = Get-FileHash -Algorithm SHA256 "webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi"
        "$($hash.Hash.ToLower())  webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi" | Out-File -FilePath "webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi.sha256" -Encoding ascii

    - name: Upload MSI Package
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi
          webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.msi.sha256

  # Removed publish-crate job since v0.1.0 was already published

  update-homebrew:
    name: Update Homebrew Formula
    needs: [ci, security-audit, integration-test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        formula: webly
        
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ci, security-audit, integration-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
