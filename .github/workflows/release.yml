name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: webly-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: webly-x86_64-unknown-linux-musl.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: webly-aarch64-unknown-linux-gnu.tar.gz
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: webly-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: webly-aarch64-apple-darwin.tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: webly-x86_64-pc-windows-msvc.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            asset_name: webly-aarch64-pc-windows-msvc.zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Build release binary
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} webly
        cd ../../../
        sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} webly.exe
        cd ../../../
        certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

    - name: Upload Release Asset Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.sha256
        asset_name: ${{ matrix.asset_name }}.sha256
        asset_content_type: text/plain

  build-packages:
    name: Build Linux Packages
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Install cargo-deb and cargo-generate-rpm
      run: |
        cargo install cargo-deb cargo-generate-rpm

    - name: Build release binary
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build .deb package
      run: |
        cargo deb --target ${{ matrix.target }} --no-build
        mv target/${{ matrix.target }}/debian/webly_${{ steps.version.outputs.VERSION }}_${{ matrix.arch }}.deb webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb

    - name: Build .rpm package
      run: |
        cargo generate-rpm --target ${{ matrix.target }}
        mv target/${{ matrix.target }}/generate-rpm/webly-${{ steps.version.outputs.VERSION }}-1.${{ matrix.arch }}.rpm webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm

    - name: Generate checksums
      run: |
        sha256sum webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb > webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb.sha256
        sha256sum webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm > webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm.sha256

    - name: Upload .deb package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb
        asset_name: webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload .deb checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb.sha256
        asset_name: webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.deb.sha256
        asset_content_type: text/plain

    - name: Upload .rpm package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm
        asset_name: webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm
        asset_content_type: application/x-rpm

    - name: Upload .rpm checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm.sha256
        asset_name: webly-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.rpm.sha256
        asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        formula: webly
        
  docker:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
